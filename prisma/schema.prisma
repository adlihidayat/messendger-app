// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init


datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
}

model Account {
  id                 String  @id @default(cuid()) @map("_id")
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  
  access_token       String?  
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid()) @map("_id")
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid()) @map("_id")
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  friend        Friend[]
  message       Message[]
}

model VerificationToken {
  id         String     @id @default(cuid()) @map("_id")
  identifier String
  token      String     @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Friend {
  id                  String    @id @default(cuid()) @map("_id")
  user1Email          String 
  user2Email          String 
  user                User     @relation(fields: [user2Email], references: [email])
  unreadMessageCount  Int
  lastMessage         String
  lastMessageAt       DateTime @default(now())
}

model Message {
  id                  String    @id @default(cuid()) @map("_id")
  user1Email          String 
  user2Email          String 
  user                User     @relation(fields: [user2Email], references: [email])
  timestamp           DateTime @default(now())
  readStatus          Boolean
  content             String
}
