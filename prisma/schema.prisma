datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
}

model Account {
  id                 String  @id @default(cuid()) @map("_id")
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  
  access_token       String?  
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid()) @map("_id")
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid()) @map("_id")
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  accounts      Account[]
  sessions      Session[]
  participants      Participant[]

  // conversationIds String[] 
  // conversations Conversation[] @relation(fields: [conversationIds], references: [id])

}

model VerificationToken {
  id         String     @id @default(cuid()) @map("_id")
  identifier String
  token      String     @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Conversation {
  id                  String    @id @default(cuid()) @map("_id")
  unreadMessageCount  Int
  lastMessage         String
  lastMessageAt       DateTime @default(now())

  // userEmails          String[] 
  // users               User[] @relation(fields: [userEmails], references: [id])
  participants        Participant[]
  messagesIds         String[] 
  messages            Message[]
}

model Participant {
  id            String    @id @default(cuid()) @map("_id")
  user          User      @relation(fields: [userEmail], references: [email])
  conversation  Conversation  @relation(fields: [conversationId], references: [id])
  userEmail        String    // This field will store the user's ID
  conversationId String   // This field will store the conversation's ID
}


model Message {
  id                  String    @id @default(cuid()) @map("_id")
  sender              String 
  timestamp           DateTime @default(now())
  readStatus          Boolean
  content             String

  conversationId      String 
  conversation        Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
}
